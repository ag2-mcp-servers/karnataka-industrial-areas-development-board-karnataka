# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T15:09:58+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

from models import (
    AlltrCertificatePostRequest,
    AlltrCertificatePostResponse,
    AlltrCertificatePostResponse1,
    AlltrCertificatePostResponse2,
    AlltrCertificatePostResponse3,
    AlltrCertificatePostResponse4,
    AlltrCertificatePostResponse5,
    AlltrCertificatePostResponse6,
    BknocCertificatePostRequest,
    BknocCertificatePostResponse,
    BknocCertificatePostResponse1,
    BknocCertificatePostResponse2,
    BknocCertificatePostResponse3,
    BknocCertificatePostResponse4,
    BknocCertificatePostResponse5,
    BknocCertificatePostResponse6,
    BpcerCertificatePostRequest,
    BpcerCertificatePostResponse,
    BpcerCertificatePostResponse1,
    BpcerCertificatePostResponse2,
    BpcerCertificatePostResponse3,
    BpcerCertificatePostResponse4,
    BpcerCertificatePostResponse5,
    BpcerCertificatePostResponse6,
    CfltrCertificatePostRequest,
    CfltrCertificatePostResponse,
    CfltrCertificatePostResponse1,
    CfltrCertificatePostResponse2,
    CfltrCertificatePostResponse3,
    CfltrCertificatePostResponse4,
    CfltrCertificatePostResponse5,
    CfltrCertificatePostResponse6,
    LcsagCertificatePostRequest,
    LcsagCertificatePostResponse,
    LcsagCertificatePostResponse1,
    LcsagCertificatePostResponse2,
    LcsagCertificatePostResponse3,
    LcsagCertificatePostResponse4,
    LcsagCertificatePostResponse5,
    LcsagCertificatePostResponse6,
    PscerCertificatePostRequest,
    PscerCertificatePostResponse,
    PscerCertificatePostResponse1,
    PscerCertificatePostResponse2,
    PscerCertificatePostResponse3,
    PscerCertificatePostResponse4,
    PscerCertificatePostResponse5,
    PscerCertificatePostResponse6,
    PsnocCertificatePostRequest,
    PsnocCertificatePostResponse,
    PsnocCertificatePostResponse1,
    PsnocCertificatePostResponse2,
    PsnocCertificatePostResponse3,
    PsnocCertificatePostResponse4,
    PsnocCertificatePostResponse5,
    PsnocCertificatePostResponse6,
    WtrblCertificatePostRequest,
    WtrblCertificatePostResponse,
    WtrblCertificatePostResponse1,
    WtrblCertificatePostResponse2,
    WtrblCertificatePostResponse3,
    WtrblCertificatePostResponse4,
    WtrblCertificatePostResponse5,
    WtrblCertificatePostResponse6,
)

app = MCPProxy(
    description="KIADB, AP (http://en.kiadb.in/) is the online s for Karnataka State Govt. Certain documents issued by it (e.g. Allotment Letter,Building Plan, Water Supply Connection, NOC For Banks etc) are made available in citizens' DigiLocker accounts.",
    termsOfService='https://apisetu.gov.in/terms.php',
    title='Karnataka Industrial Areas Development Board, Karnataka',
    version='3.0.0',
    servers=[{'url': 'https://apisetu.gov.in/kiadb/v3'}],
)


@app.post(
    '/alltr/certificate',
    description=""" API to verify Allotment Letter. """,
    tags=['certificate_processing'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def alltr(body: AlltrCertificatePostRequest = None):
    """
    Allotment Letter
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/bknoc/certificate',
    description=""" API to verify NOC For Banks. """,
    tags=['certificate_processing'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def bknoc(body: BknocCertificatePostRequest = None):
    """
    NOC For Banks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/bpcer/certificate',
    description=""" API to verify Building Plan. """,
    tags=['certificate_processing'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def bpcer(body: BpcerCertificatePostRequest = None):
    """
    Building Plan
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/cfltr/certificate',
    description=""" API to verify Confirmatory Letter. """,
    tags=['certificate_processing'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def cfltr(body: CfltrCertificatePostRequest = None):
    """
    Confirmatory Letter
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/lcsag/certificate',
    description=""" API to verify Lease cum Sale Agreement. """,
    tags=['certificate_processing'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def lcsag(body: LcsagCertificatePostRequest = None):
    """
    Lease cum Sale Agreement
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/pscer/certificate',
    description=""" API to verify Possession Certificate. """,
    tags=['certificate_processing'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def pscer(body: PscerCertificatePostRequest = None):
    """
    Possession Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/psnoc/certificate',
    description=""" API to verify NOC for New Power Supply. """,
    tags=['certificate_processing'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def psnoc(body: PsnocCertificatePostRequest = None):
    """
    NOC for New Power Supply
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/wtrbl/certificate',
    description=""" API to verify Water Bill/ Connection. """,
    tags=['certificate_processing'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def wtrbl(body: WtrblCertificatePostRequest = None):
    """
    Water Bill/ Connection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
